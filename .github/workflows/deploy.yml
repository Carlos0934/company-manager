name: Continuous Integration

on:
  pull_request:
    branches: [main]

jobs:
  api-integration:
    name: API Integration
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
    env:
      GITHUB_TOKEN: ${{ secrets.GHB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [api-integration]

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push  image to Amazon ECR

        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: company-manager-api
          MONGO_URI: ${{ secrets.MONGO_URI }}
          IMAGE_TAG: latest

        run: |
          docker build --build-arg NODE_ENV=production --build-arg PORT=3000 --build-arg MONGO_URI=${MONGO_URI} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Pull & Deploy image to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

          # stop and remove existing containers

          docker stop company-manager-api

          docker rm company-manager-api

          # pull latest images

          docker pull 556737114908.dkr.ecr.us-east-1.amazonaws.com/company-manager-api:latest

          docker run -d -p 3000:3000 --name company-manager-api 556737114908.dkr.ecr.us-east-1.amazonaws.com/company-manager-api:latest

          '
